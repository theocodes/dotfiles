#+TITLE: Emacs
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Bootstrap straight.el for dependencies

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; install use-package
  (straight-use-package 'use-package)

  ;; use straight by default with use-package
  (setq package-enable-at-startup nil
        straight-use-package-by-default t)
#+end_src

* Custom

Helper functions I've put together to help create the
workflow I want.

** theocodes/active-side-window

This a custom action function which wraps =display-buffer-in-side-window=
while selecting the window being opened.

#+begin_src emacs-lisp
(defun theocodes/active-side-window (buffer alist)
  (select-window  (display-buffer-in-side-window buffer alist)))
#+end_src

** theocodes/vterm-popup-toggle

This entry sets up so that all buffers ending in "popup" display
at the bottom of the screen and only takes 30% of the screen.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("popup\\*$"
               (theocodes/active-side-window)
               (side . bottom)
               (slot . -1)
               (window-height . 0.40)))
#+end_src

Then I make sure that =popper= picks up buffers ending in "popup"
which will give me the ability to toggle the given popup by
calling =popper-toggle-latest=.

The function which can be called interactively creates an instance of
=vterm= while naming it "vterm-popup" which will cause the window to be
displayed as a popup as set by the above =display-buffer-alist= entry.

#+begin_src emacs-lisp
(defun theocodes/vterm-popup-toggle ()
  (interactive)
  (let ((buf (get-buffer "*vterm-popup*")))
    (if buf
	(popper-toggle-latest)
      (with-current-buffer (vterm "*vterm-popup*")
	(vterm-send-string (concat "cd " (projectile-project-root)))
	(vterm-send-return)
	(vterm-clear)))))
#+end_src

** theocodes/vterm-toggle

#+begin_src emacs-lisp
(defun theocodes/vterm-toggle ()
  (interactive)
  (if (string= (buffer-name) "*vterm*")
      (evil-switch-to-windows-last-buffer)
    (vterm)))
#+end_src

** theocodes/run-command

Helper function to enable running arbitrary commands in vterm.

#+begin_src emacs-lisp
(defun theocodes/run-command (buf command)
  (with-current-buffer (vterm buf)
    (setq-local vterm-kill-buffer-on-exit nil)
    (vterm-send-string (concat "cd " (projectile-project-root)))
    (vterm-send-return)
    (vterm-clear)
    (vterm-send-string command)
    (vterm-send-return)
    (evil-force-normal-state)))
#+end_src

** theocodes/rspec-spec

Run the whole spec file in vterm.

#+begin_src emacs-lisp
(defun theocodes/rspec-spec ()
  (interactive)
  (let
      ((file (file-relative-name buffer-file-name (projectile-project-root))))
    (with-current-buffer (vterm "*rspec-popup*")
      (setq-local vterm-kill-buffer-on-exit nil)
      (vterm-send-string (concat "cd " (projectile-project-root)))
      (vterm-send-return)
      (vterm-clear)
      (vterm-send-string (concat "rspec " file " && exit"))
      (vterm-send-return)
      (evil-force-normal-state))))
#+end_src

** theocodes/rspec-spec-single

Run a single spec in vterm.

#+begin_src emacs-lisp
(defun theocodes/rspec-spec-single ()
  (interactive)
  (let
      ((file (file-relative-name buffer-file-name (projectile-project-root)))
       (line (line-number-at-pos)))
    (with-current-buffer (vterm "*rspec-popup*")
      (setq-local vterm-kill-buffer-on-exit nil)
      (vterm-send-string (concat "cd " (projectile-project-root)))
      (vterm-send-return)
      (vterm-clear)
      (vterm-send-string (concat "rspec " file ":" (number-to-string line) " && exit"))
      (vterm-send-return)
      (evil-force-normal-state))))
#+end_src

** theocodes/irb

Start an IRB session in vterm which closes when exited.

#+begin_src emacs-lisp
(defun theocodes/irb ()
  (interactive)
  (with-current-buffer (vterm "*irb-popup*")
    (vterm-send-string (concat "cd " (projectile-project-root)))
    (vterm-send-return)
    (vterm-clear)
    (vterm-send-string "irb && exit")
    (vterm-send-return)))
#+end_src

** +org/insert-item-below and +org/insert-item-above

#+begin_src emacs-lisp
(defun +org--insert-item (direction)
  (let ((context (org-element-lineage
                  (org-element-context)
                  '(table table-row headline inlinetask item plain-list)
                  t)))
    (pcase (org-element-type context)
      ;; Add a new list item (carrying over checkboxes if necessary)
      ((or `item `plain-list)
       (let* ((item
               (if (eq 'item (org-element-type context))
                   context
                 ;; if the context has type `plain-list', find closest item
                 (let ((struct (org-element-property :structure context)))
                   (save-excursion
                     (goto-char
                      (if (= (point) (org-element-property :begin context))
                          ;; at the begin of the plain-list, we get the list and
                          ;; not the item with `org-element-at-point'
                          (1+ (car (car struct)))
                        (1+ (car (car (last struct))))))
                     (org-element-at-point)))))
              (begin (org-element-property :begin item))
              (end (org-element-property :end item))
              (cnts-begin (org-element-property :contents-begin item))
              (str (string-trim (buffer-substring begin (or cnts-begin end)) "\n+" "[ \t\r\n]+")))
         (pcase direction
           (`below
            (goto-char (max (1- end) (line-end-position)))
            (insert "\n" str " "))
           (`above
            (goto-char (line-beginning-position))
            (insert str " ")
            (save-excursion (insert "\n"))))))

      ;; Add a new table row
      ((or `table `table-row)
       (pcase direction
         ('below (save-excursion (org-table-insert-row t))
                 (org-table-next-row))
         ('above (save-excursion (org-shiftmetadown))
                 (+org/table-previous-row))))

      ;; Otherwise, add a new heading, carrying over any todo state, if
      ;; necessary.
      (_
       (let ((level (or (org-current-level) 1)))
         ;; I intentionally avoid `org-insert-heading' and the like because they
         ;; impose unpredictable whitespace rules depending on the cursor
         ;; position. It's simpler to express this command's responsibility at a
         ;; lower level than work around all the quirks in org's API.
         (pcase direction
           (`below
            (let (org-insert-heading-respect-content)
              (goto-char (line-end-position))
              (org-end-of-subtree)
              (insert "\n" (make-string level ?*) " ")))
           (`above
            (org-back-to-heading)
            (insert (make-string level ?*) " ")
            (save-excursion (insert "\n"))))
         (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                     (todo-type    (org-element-property :todo-type context)))
           (org-todo
            (cond ((eq todo-type 'done)
                   ;; Doesn't make sense to create more "DONE" headings
                   (car (+org-get-todo-keywords-for todo-keyword)))
                  (todo-keyword)
                  ('todo)))))))

    (when (org-invisible-p)
      (org-show-hidden-entry))
    (when (and (bound-and-true-p evil-local-mode)
               (not (evil-emacs-state-p)))
      (evil-insert 1))))

(defun +org/insert-item-below (count)
  "Inserts a new heading, table cell or item below the current one."
  (interactive "p")
  (dotimes (_ count) (+org--insert-item 'below)))

(defun +org/insert-item-above (count)
  "Inserts a new heading, table cell or item above the current one."
  (interactive "p")
  (dotimes (_ count) (+org--insert-item 'above)))
#+end_src

* Configuration
** Set local variables

#+begin_src emacs-lisp
(setq enable-local-variables :all)
#+end_src

** Fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka Term" :height 160)
#+end_src

** UI

#+begin_src emacs-lisp
;; disable welcome screen
(setq inhibit-startup-message t)

;; disable default ui elements
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; relative line numbers
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)

;; Disable line numbers for some modes
(dolist (mode '(vterm-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Backup files

Move backup files out of current directory.

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
#+end_src

Disable lock files.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Keybindings

#+begin_src emacs-lisp
;; make ESC quit some prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; find in file
(global-set-key (kbd "C-s") 'swiper)

;; paste with CMD-v
(global-set-key (kbd "M-v") 'yank)

;; find file the old way
(global-set-key (kbd "C-p") 'projectile-find-file)
#+end_src

*** Toggle vterm

#+begin_src emacs-lisp
(global-set-key (kbd "M-i") 'theocodes/vterm-popup-toggle)
(global-set-key (kbd "M-I") 'theocodes/vterm-toggle)
#+end_src

*** Switching perpsectives

#+begin_src emacs-lisp
(global-set-key (kbd "M-1") '(lambda() (interactive) (persp-switch-by-number 1)))
(global-set-key (kbd "M-2") '(lambda() (interactive) (persp-switch-by-number 2)))
(global-set-key (kbd "M-3") '(lambda() (interactive) (persp-switch-by-number 3)))
(global-set-key (kbd "M-4") '(lambda() (interactive) (persp-switch-by-number 4)))
(global-set-key (kbd "M-5") '(lambda() (interactive) (persp-switch-by-number 5)))
#+end_src

** Window Management

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*rspec-compilation\\*"
               (theocodes/active-side-window)
               (side . right)
               (window-width . 0.8)))

(add-to-list 'display-buffer-alist
             '("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\)\\*"
               (theocodes/active-side-window)
               (side . bottom)
               (slot . 0)
               (window-height . 0.25)))
#+end_src

** Recent Files

Keep a history of recently opened files.

#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src

** Highlight parens

Highlights the entire elisp expression when point on delimeters.

#+begin_src emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'parenthesis)
#+end_src

** Change "yes or no" to "y or n"

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Tab width

#+begin_src emacs-lisp
(setq js-indent-level 2)
#+end_src

* Packages
** org-mode
Requiring org-tempo makes the template expanding (=<s=) available. 

*Warning*: Keep this config close to the top. If another package tries to load
org before straight.el has a chance to, it will load the version shipped with
Emacs and cause issues.

#+begin_src emacs-lisp
(use-package org
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("rb" . "src ruby"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))

  (define-key org-mode-map [remap org-insert-heading-respect-content] '+org/insert-item-below)
  (define-key org-mode-map [remap org-insert-todo-heading-respect-content] '+org/insert-item-above)

  ;; do not put spaces on the left
  (setq org-src-preserve-indentation t)

  ;; expand headers when point is past ellipsis
  (add-hook 'org-tab-first-hook 'org-end-of-line)

  (setq org-src-strip-leading-and-trailing-blank-lines t)
  (setq org-startup-folded t)
  (setq org-ellipsis " ▾"
        org-special-ctrl-a/e t
        org-startup-indented t
        org-hide-emphasis-markers t
        org-todo-keywords
        '((sequence "TODO" "PROGRESS" "BLOCKED" "DONE"))
        org-todo-keyword-faces
        '(("TODO" . org-warning)
          ("PROGRESS" . "yellow")
          ("BLOCKED" . (:foreground "red" :weight bold))
          ("DONE" . org-done)))
  (require 'org-tempo))
#+end_src

*** org-bullets

Customization for org headings.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** org-roam

Take notes in the roam style with org files.

#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t
        org-roam-dailies-directory "journal/")
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  :config
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode))
#+end_src

** exec-path-from-shell

Make Emacs load system PATH when launching via GUI.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

** all-the-icons

Run `all-the-icons-install-fonts` the first setting up emacs on a new system.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** doom-modeline

#+begin_src emacs-lisp
;; (use-package doom-modeline
;;   :config
;;   (setq doom-modeline-minor-modes nil)
;;   :hook (doom-modeline-mode . column-number-mode) 
;;   :init (doom-modeline-mode 1))
#+end_src

** doom-themes

#+begin_src emacs-lisp
(use-package doom-themes)
#+end_src

** modus-themes

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
	modus-themes-bold-constructs nil
	modus-themes-org-blocks 'gray-background
	modus-themes-subtle-line-numbers t
	modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9))
	modus-themes-hl-line '(underline accented)
	modus-themes-completions '((matches . (extrabold))
                                 (selection . (semibold accented))
                                 (popup . (accented intense)))
	modus-themes-region '(bg-only no-extend))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-vivendi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src

** evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; Disable so I can set centaur-tabs-forward/backward to it
  (define-key evil-normal-state-map (kbd "C-n") nil)
  (define-key evil-motion-state-map (kbd "C-e") nil)

  (define-key evil-normal-state-map (kbd "H") 'centaur-tabs-backward)
  (define-key evil-normal-state-map (kbd "L") 'centaur-tabs-forward)
  
  ;; kill buffer with Q
  (define-key evil-normal-state-map [remap evil-record-macro] 'kill-current-buffer)

  ;; Disable so so it doesn't conflict with embark
  (define-key evil-normal-state-map (kbd "C-.") nil)

  ;; Ctrl-p is for finding files...
  (define-key evil-normal-state-map (kbd "C-p") nil)

  ;; No more accidentally going to the top of the file
  (evil-global-set-key 'motion "H" nil) 

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package undo-tree
  :ensure t
  :after evil
  :diminish
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))
#+end_src

** evil-multiedit

#+begin_src emacs-lisp
(use-package evil-multiedit
  :config
  (evil-multiedit-default-keybinds))
#+end_src

** evil-commentary

#+begin_src emacs-lisp
(use-package evil-commentary
  :config
  (evil-commentary-mode))
#+end_src

** ivy

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (setq ivy-height 20)
  (setq ivy-initial-inputs-alist
	'(
	 (counsel-M-x . "")
	 (counsel-describe-symbol . "")))
  (ivy-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src

** counsel

#+begin_src emacs-lisp
(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
#+end_src
         
** helpful
         
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
         
#+begin_src emacs-lisp
;; (use-package helpful
;;   :commands (helpful-callable helpful-variable helpful-command helpful-key)
;;   :custom
;;   (counsel-describe-function-function #'helpful-callable)
;;   (counsel-describe-variable-function #'helpful-variable)
;;   :bind  
;;   ([remap describe-function] . counsel-describe-function)
;;   ([remap describe-command] . helpful-command)
;;   ([remap describe-variable] . counsel-describe-variable)
;;   ([remap describe-key] . helpful-key))
#+end_src
         
** rainbow-delimeters

Show matching colors for delimeters to make it easier to spot open/close pairs.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1))
#+end_src

** which-key

Useful tool to remind me of keymaps.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** centaur-tabs

#+begin_src emacs-lisp
(use-package centaur-tabs
  ;; :custom
  ;; (centaur-tabs-change-fonts "arial" 160)
  :init
  (setq centaur-tabs-cycle-scope 'tabs)
  :config
  (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-mode t)

  (defun centaur-tabs-hide-tab (x)
  "Do no to show buffer X in tabs."
  (let ((name (format "%s" x)))
    (or
     ;; Current window is not dedicated window.
     (window-dedicated-p (selected-window))

     ;; Buffer name not match below blacklist.
     (string-prefix-p "*epc" name)
     (string-prefix-p "*helm" name)
     (string-prefix-p "*Helm" name)
     (string-prefix-p "*Compile-Log*" name)
     (string-prefix-p "*lsp" name)
     (string-prefix-p "*company" name)
     (string-prefix-p "*Flycheck" name)
     (string-prefix-p "*tramp" name)
     (string-prefix-p " *Mini" name)
     (string-prefix-p "*help" name)
     (string-prefix-p "*straight" name)
     (string-prefix-p " *temp" name)
     (string-prefix-p "*Help" name)
     (string-suffix-p "popup*" name)

     ;; Is not magit buffer.
     (and (string-prefix-p "magit" name)
	  (not (file-name-extension name)))))))
#+end_src

** general

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (rune/leader-keys
    "n"  '(:ignore t :which-key "notes")
    "nf" '(org-roam-node-find :which-key "find or create node")
    "nc" '(org-roam-dailies-capture-today :which-key "capture note")
    "nd" '(org-roam-dailies-goto-date :which-key "go to date")
    "nt" '(org-roam-dailies-goto-today :which-key "go to today")

    "f"  '(:ignore t :which-key "files")
    "fr" '(counsel-recentf :which-key "open a recent file")

    "w"  '(:ignore t :which-key "window")
    "wsh" '(evil-window-split :which-key "split window horizontally")
    "wsv" '(evil-window-vsplit :which-key "split window vertically")

    "m"  '(:ignore t :which-key "local")
    "mt"  '(:ignore t :which-key "tests")
    "mts"  '(theocodes/rspec-spec-single :which-key "run spec near cursor")
    "mtv"  '(theocodes/rspec-spec :which-key "run current spec buffer")
    "mta"  '(rspec-verify-all :which-key "run all specs")

    "b"  '(:ignore t :which-key "buffers")
    "bb" '(persp-counsel-switch-buffer :which-key "list and find buffer")
    "bd" '(kill-current-buffer :which-key "kill current buffer")

    "p"  '(:ignore t :which-key "project")
    "pp"  '(projectile-switch-project :which-key "switch to project")
    "pf"  '(projectile-find-file :which-key "find file in project")
    "pa"  '(projectile-add-known-project :which-key "add known project")
    "pr"  '(projectile-remove-known-project :which-key "remove known project")
    "pk"  '(projectile-kill-buffers :which-key "kill all project buffers")

    "g"  '(:ignore t :which-key "git")
    "gb" '(magit-branch :which-key "branch actions")
    "gg" '(magit :which-key "magit status")

    "*"   '(counsel-ag :which-key "search in project")
    "TAB" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer")
    "SPC" '(dired-jump :which-key "dired on current directory")
    "`"   '(persp-switch :which-key "switch/create perspective")
    "."   '(find-file :which-key "find file")))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :init
  (setq-default with-editor-emacsclient-executable "emacsclient")
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src
   
** projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :init
  (when (file-directory-p "~/Code")
    (setq projectile-project-search-path '("~/Code")))
  :config
  (projectile-global-mode +1))
#+end_src

** vterm

#+begin_src emacs-lisp
(use-package vterm
  :config
  ;; disable so it doesn't conflict with others
  (define-key vterm-mode-map (kbd "C-e") nil)
  (define-key vterm-mode-map (kbd "C-n") nil)
  (define-key vterm-mode-map (kbd "M-i") nil)
  (define-key vterm-mode-map (kbd "M-I") nil)
  (define-key vterm-mode-map (kbd "M-v") nil)
  :load-path  "~/Code/emacs-libvterm/")
#+end_src

** popper

#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind
  (("C-`"   . popper-toggle-latest)
   ("M-`"   . popper-cycle)
   ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-mode-line t
        popper-display-control 'user)
  (setq popper-reference-buffers
	'("popup\\*$"))
  (popper-mode +1)
  (popper-echo-mode +1))

#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
#+end_src

** eshell

#+begin_src emacs-lisp
(defun theocodes/configure-eshell ()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; truncate the buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size 10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . theocodes/configure-eshell))
#+end_src

** corfu

A small completion package that leverages Emacs' completion facilities and concentrates
on providing a polished completion UI.

#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-auto t)
  (corfu-preselect-first nil)
  (corfu-quit-at-boundary t) 
  ;; (corfu-commit-predicate t)
  (corfu-quit-no-match t)
  (corfu-auto-delay 0)
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (corfu-global-mode))
#+end_src

Cape provides a bunch of Completion At Point Functions (CAPFs) which is be
used by Corfu to offer completions.

#+begin_src emacs-lisp
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-symbol))
#+end_src

This emacs package adds configurable icon or text-based completion prefixes based
on the :company-kind property that many completion backends (such as lsp-mode and
Emacs 28's elisp-mode) provide.

#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** embark

Typically if you want to perform an action, you'd call a function associated
with said action and then proceed to pick a target (when there is one).

Embark flips this on its head and lets you perform an action that is associated
with the thing on have your cursor on.

For instance, I can use =find-file= to pick a file as normal, but then instead of
pressing =RET= to open the file, I can press =C-.= which will give me some options
of actions associated with a =filename= type, such as =delete=, =chown= etc.

[[https://karthinks.com/software/fifteen-ways-to-use-embark/][Here]] are some great ways to use embark.

#+begin_src emacs-lisp
(use-package embark
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-become)
   ("C-h B" . embark-bindings))
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config

  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  (lsp-rust-analyzer-server-display-inlay-hints t)
  :hook
  ;; (go-mode . lsp)
  (rustic-mode . lsp)
  ;(ruby-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  ;; (lsp-ui-sideline-show-hover t)
  ;; (lsp-ui-sideline-show-diagnostics t)
  ;; (lsp-ui-peek-always-show t)
  (lsp-ui-doc-enable nil))
#+end_src

** yaml

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

** ruby

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode "\\.\\(?:a?rb\\|aslsx\\)\\'"
  :mode "/\\(?:Brew\\|Fast\\)file\\'"
  :interpreter "j?ruby\\(?:[0-9.]+\\)"
  :config
  (setq ruby-insert-encoding-magic-comment nil))

;; (use-package inf-ruby
;;   :config
;;   (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)
;;   (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))

;; (use-package rspec-mode
;;   :config
;;   (eval-after-load 'rspec-mode
;;     '(rspec-install-snippets)))

(use-package haml-mode)
#+end_src

** go

#+begin_src emacs-lisp
(use-package go-mode
  :config
  (add-hook 'before-save-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
  (setq gofmt-command "goimports"))
#+end_src

** rust

*Note* This is currently causing issues with magit O_o

#+begin_src emacs-lisp
;; (use-package rustic
;;   :config
;;   (setq lsp-eldoc-hook nil)
;;   (setq lsp-enable-symbol-highlighting nil)
;;   (setq lsp-signature-auto-activate nil)
;;   (setq rustic-lsp-server 'rust-analyzer)
;;   (setq rustic-format-on-save t))
#+end_src

** git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :custom
  (git-gutter:modified-sign " ")
  (git-gutter:added-sign " ")  
  (git-gutter:deleted-sign " ")
  :config
  (global-git-gutter-mode +1))
#+end_src

** flycheck

#+begin_src emacs-lisp
;; (use-package flycheck
;;   :init (global-flycheck-mode))
#+end_src

** perspective

#+begin_src emacs-lisp
(use-package perspective
  :bind (("C-x k" . persp-kill-buffer*))
  :init
  (persp-mode))
#+end_src
