#+TITLE: Emacs
#+PROPERTY: header-args :tangle emacs/.emacs.d/init.el

* Bootstrap straight.el for dependencies

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; install use-package
  (straight-use-package 'use-package)

  ;; use straight by default with use-package
  (setq package-enable-at-startup nil
	straight-use-package-by-default t)
#+end_src

* Configuration

** UI

#+begin_src emacs-lisp
    ;; disable welcome screen
    (setq inhibit-startup-message t) 

    ;; disable default ui elements
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)

    ;; relative line numbers
    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative)
#+end_src

** Backup files

   Move backup files out of current directory.

   #+begin_src emacs-lisp
     (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
   #+end_src

   Disable lock files.
   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
   #+end_src

** Fonts

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Iosevka" :height 160)

#+end_src

** Icons

Run `all-the-icons-install-fonts` the first setting up emacs on a new system.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-vivendi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src

** Movement
*** evil

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
 (evil-collection-init))
#+end_src

** Completion

The completion engine.

#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
		  ("C-j" . vertico-next)
		  ("C-k" . vertico-previous)
		  ("C-f" . vertico-exit)
		  :map minibuffer-local-map
		  ("M-h" . backward-kill-word))
      :custom
      (vertico-cycle t)
      :init
      (vertico-mode))
#+end_src

Save completion history.

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

Extra context for completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

Fuzzy finding package that doesn't care about order.

#+begin_src emacs-lisp
    (use-package orderless
      :init
      (setq completion-styles '(orderless)
	    completion-category-defaults nil
	    completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Practical commands

#+begin_src emacs-lisp
(use-package consult)
#+end_src

** Syntax highlighting

*** rainbow-delimeters

Show matching colors for delimeters to make it easier to spot open/close pairs.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Keybindings
*** which-key

Useful tool to remind me of keymaps.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

*** general

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "b"  '(:ignore t :which-key "buffers")
      "bb" '(consult-buffer :which-key "list and find buffer")
      "bd" '(kill-current-buffer :which-key "kill current buffer")

      "p"  '(:ignore t :which-key "project")
      "pp"  '(projectile-switch-project :which-key "switch to project")
      "pf"  '(projectile-find-file :which-key "find file in project")
      "pa"  '(projectile-add-known-project :which-key "add known project")
      "pr"  '(projectile-remove-known-project :which-key "remove known project")
      "pk"  '(projectile-kill-buffers :which-key "kill all project buffers")

      "g"  '(:ignore t :which-key "git")
      "gb" '(magit-branch :which-key "branch actions")
      "gg" '(magit :which-key "magit status")

      "TAB" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer")
      "."  '(find-file :which-key "find file")))
#+end_src

*** Other

**** Make ESC quit some prompts

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

**** Find in file

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'consult-line)
#+end_src

**** Paste with CMD-v

#+begin_src emacs-lisp
  (global-set-key (kbd "M-v") 'yank)
#+end_src

** Note taking
*** org-mode

  Requiring org-tempo makes the template expanding (`<s`) available. 

#+begin_src emacs-lisp

  (use-package org
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (require 'org-tempo))

#+end_src

** Version control

   #+begin_src emacs-lisp
     (use-package magit
       :init
       (setq-default with-editor-emacsclient-executable "emacsclient")
       (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
   #+end_src
   
** Projects

#+begin_src emacs-lisp
      (use-package projectile
	:diminish projectile-mode
	:init
	(when (file-directory-p "~/Code")
	  (setq projectile-project-search-path '("~/Code")))
	:config
	(projectile-global-mode +1))
#+end_src

** Terminal

#+begin_src emacs-lisp
    (use-package vterm
      :load-path  "~/Code/emacs-libvterm/")
#+end_src

** Popup windows

#+begin_src emacs-lisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
	   ("M-`"   . popper-cycle)
	   ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
	  '("\\*Messages\\*"
	    "Output\\*$"
	    "\\*Async Shell Command\\*"
	    help-mode
	    vterm-mode
	    compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet)
#+end_src

** Commenting

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Autocomplete

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
	  ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

** Ruby

#+begin_src emacs-lisp
  (use-package ruby-mode
  :mode "\\.rb\\'"
  :mode "Rakefile\\'"
  :mode "Gemfile\\'"
  :mode "Berksfile\\'"
  :mode "Vagrantfile\\'"
  :interpreter "ruby"

  :init
  (setq ruby-indent-level 2
	ruby-indent-tabs-mode nil)
  (add-hook 'ruby-mode 'superword-mode)

  :bind
  (([(meta down)] . ruby-forward-sexp)
   ([(meta up)]   . ruby-backward-sexp)
   (("C-c C-e"    . ruby-send-region))))

  (use-package web-mode
  :mode "\\.erb\\'")

  (use-package yari
  :init
  (add-hook 'ruby-mode-hook
	    (lambda ()
	      (local-set-key [f1] 'yari))))

  (use-package inf-ruby
  :init
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
