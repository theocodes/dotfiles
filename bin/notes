#!/usr/bin/env ruby

# frozen_string_literal: true

NOTES_DIR = File.expand_path(ENV.fetch('NOTES_DIR'))
EDITOR = ENV.fetch("EDITOR", "nvim") 

TEMPLATE = <<~TEMPLATE
  ---
  title: {title}
  date: {date}
  tags: {tags}
  identifier: {identifier}
  ---
TEMPLATE

TAGS = <<~TAGS
  journal
  dev
TAGS

def create_note(title, tags)
  time = Time.now
  identifier = time.strftime('%Y%m%dT%H%M%S')
  date = time.strftime('%a, %d %b %Y @ %H:%M:%S')

  normalized_title = title.gsub(',', '').downcase.gsub(/\s+/, '-')

  tags = tags.join('_')
  filename = "#{identifier}--#{[normalized_title, tags].join('__')}.md"
  filepath = File.join(NOTES_DIR, filename)

  File.open(filepath, 'w') do |file|
    file.write(TEMPLATE.gsub('{title}', title)
                       .gsub('{date}', date)
                       .gsub('{identifier}', identifier)
                       .gsub('{tags}', tags.gsub('_', ', ')))
  end

  File.join(NOTES_DIR, filename)
end

def create_daily_note
  title = Time.now.strftime('%a, %d %b %Y')
  create_note title, ['daily']
end

def open_file(filepath)
  system("#{EDITOR} #{filepath}")
end

def run
  command = ARGV.first

  case command
  when 'daily'
    date = Time.now.strftime('%Y%m%d')
    existing_file = `find #{NOTES_DIR} -name '#{date}*daily.md'`

    if existing_file.empty?
      file = create_daily_note
      open_file file
    else
      open_file existing_file
    end
  else
    lines = `ls #{NOTES_DIR} | fzf --print-query --preview 'glow #{NOTES_DIR}/{}'`.split("\n")
    return if lines.empty?

    title = lines.first
    filepath = lines.last

    if File.exist?(File.join(NOTES_DIR, filepath))
      open_file "#{NOTES_DIR}/#{filepath}"
    else
      lines = `echo "#{TAGS}" | fzf --multi --print-query`.split("\n")
      query = lines.first

      if query == ''
        open_file create_note(title, lines[1..])
      else
        open_file create_note(title, query.split(','))
      end
    end
  end
end

run
